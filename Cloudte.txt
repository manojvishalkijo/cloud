docker network and docker compose:

 docker bridge:
- Open Docker Desktop
- Open CMD
- docker network
- docker network ls
- docker inspect bridge
- docker network create test-bridge
- docker run -d —name con1 nginx
- docker run -d —name con2 nginx
- docker network connect test-bridge con1
- docker network connect test-bridge con2
- docker exec -it con1 bash
- apt update
- apt install iputils-ping
- ping con2
- exit
docker inspect network test_bridge

docker host:
- docker pull ubuntu
- docker run -dit —name host1 —network host ubuntu
- docker run -dit —name host2 —network host ubuntu
- docker exec host1 apt-get update
- docker exec host1 apt-get install -y iputils-ping
docker run -dit --name host_container1 --network host ubuntu:latest
docker run -dit --name host_container2 --network host ubuntu:latest
1. docker exec host_container1 apt-get update
2. docker exec host_container1 apt-get install -y iputils-ping
3. docker exec host_container2 apt-get update
4. docker exec host_container2 apt-get install -y iputils-ping
docker exec -it host2 apt-get update
docker exec -it host2 apt-get install iputils-ping
 docker exec host1 hostname -i
 ip will come
- docker exec host2 ping -c 4 (that ip)
docker inspect network host


docker volumes:

11. Once the installation is a success you should receive Complete! message in the terminal.
SCREENSHOT 11 PLACE IT HERE
12. Once after installing the docker start the docker daemon service using sudo systemctl start docker
SCREENSHOT 12 PLACE IT HERE
13. Finally run the command sudo docker run hello-world and the following message should be displayed in your terminal
SCREENSHOT 13 PLACE IT HERE
14. Create a docker volume using the command “docker volume create my_volume”
SCREENSHOT 14 PLACE IT HERE
optional: in emergrcy
docker stop my_nginx
docker rm my_nginx

15. Run an nginx container by mounting the created volume in it with the following command “docker run -d --name my_nginx -v my_volume -p 80:80 nginx”
SCREENSHOT 15 PLACE IT HERE
16. Inspect the container and observe whether the volume is mounted properly in it or not “docker inpect my_nginx”



docker compose:

-->
 sudo su
    
    yum install docker 
    
    
    
    sudo systemctl start docker

-->docker ps
-->sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
-->sudo chmod +x /usr/local/bin/docker-compose
-->docker-compose --version
-->nano docker-compose.yml
(new tab)
-->version: '3.8'

version: '3.8'

services:
  web:
    image: nginx:latest
    ports:
      - "80:80"
    networks:
      - frontend

  database:
    image: mysql:latest
    environment:
      MYSQL_DATABASE: exampledb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend

  cache:
    image: redis:latest
    networks:
      - backend

networks:
  frontend:
  backend:

volumes:
  db-data:


crtlo and crtl x
-->docker-compose up -d
-->docker ps
-->docker-compose up -d --scale cache=3

ex8:
nginxdemos/hello


TDD:



mkdir -p src test
cd src
touch Calculator.java
cd ..
cd test
touch Test.java
cd ..
wget https://repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar
wget https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
ec2-user:~/environment $ javac -cp .:junit-4.13.2.jar:hamcrest-core-1.3.jar src/BankAccount.java test/BankAccountTest.java
ec2-user:~/environment $ java -cp .:src:test:junit-4.13.2.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore BankAccountTest


public class BankAccount {

    int balance = 10000;

    public int deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposit successful! New balance: $" + balance);
        } else {
            System.out.println("Invalid deposit amount.");
        }
        return balance;
    }

    public int withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawal successful! New balance: $" + balance);
        } else if (amount > balance) {
            System.out.println("Insufficient funds.");
        } else {
            System.out.println("Invalid withdrawal amount.");
        }
        return balance;
    }

    public double getBalance() {
        return balance;
    }
}


import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class BankAccountTest {
@Test
public void testDep() {
    BankAccount ba = new BankAccount();
    assertEquals("An Error has occurred while depositing the money", 10200, ba.deposit(200));
}

@Test
public void testWit() {
    BankAccount ba = new BankAccount();
    assertEquals("An Error has occurred while withdrawing the money", 9800, ba.withdraw(200));
}


}



- Calculator Code:

java
public class Calculator {
    public int add(int a, int b) {
        return a + b;
    }
}


- CalculatorTest Code:

java
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class CalculatorTest {
    @Test
    public void testAdd() {
        Calculator calculator = new Calculator();
        assertEquals(5, calculator.add(2, 3));
    }
}


- Now run this command in terminal

bash
javac -cp .:junit-4.13.2.jar:hamcrest-core-1.3.jar src/TrainBookingSystem.java test/TrainBookingSystemTest.java


- This command is the display results in terminal (below)
java -cp .:src:test:junit-4.13.2.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore TrainBookingSystem








public class TrainBookingSystem {
    // Represents the total number of available seats
    private int availableSeats;

    public TrainBookingSystem(int seats) {
        this.availableSeats = seats;
    }

    // Add train
    public String addTrain(String trainName) {
        // For simplicity, assume the train is always added successfully
        return "Train " + trainName + " added successfully";
    }

    // Book ticket
    public String bookTicket() {
        if (availableSeats > 0) {
            availableSeats--;
            return "Ticket booked successfully";
        } else {
            return "No seats available";
        }
    }

    // Cancel ticket
    public String cancelTicket() {
        availableSeats++;
        return "Ticket cancelled successfully";
    }

    // Get available seats
    public int getAvailableSeats() {
        return availableSeats;
    }
}


import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class TrainBookingSystemTest {

    @Test
    public void testAddTrain() {
        TrainBookingSystem tbs = new TrainBookingSystem(10);
        String result = tbs.addTrain("Express");
        assertEquals("Train Express added successfully", result);
    }

    @Test
    public void testInitialAvailableSeats() {
        TrainBookingSystem tbs = new TrainBookingSystem(10);
        assertEquals(10, tbs.getAvailableSeats());
    }

    @Test
    public void testBookTicket() {
        TrainBookingSystem tbs = new TrainBookingSystem(10);
        String result = tbs.bookTicket();
        assertEquals("Ticket booked successfully", result);
        assertEquals(9, tbs.getAvailableSeats());
    }

    @Test
    public void testBookTicketWhenFull() {
        TrainBookingSystem tbs = new TrainBookingSystem(1);
        tbs.bookTicket();
        String result = tbs.bookTicket();
        assertEquals("No seats available", result);
    }

    @Test
    public void testCancelTicket() {
        TrainBookingSystem tbs = new TrainBookingSystem(10);
        tbs.bookTicket();
        String result = tbs.cancelTicket();
        assertEquals("Ticket cancelled successfully", result);
        assertEquals(10, tbs.getAvailableSeats());
    }

    @Test
    public void testCancelTicketWithoutBooking() {
        TrainBookingSystem tbs = new TrainBookingSystem(10);
        String result = tbs.cancelTicket();
        assertEquals("Ticket cancelled successfully", result);
        assertEquals(11, tbs.getAvailableSeats());
    }

    @Test
    public void testMultipleBookings() {
        TrainBookingSystem tbs = new TrainBookingSystem(5);
        tbs.bookTicket();
        tbs.bookTicket();
        assertEquals(3, tbs.getAvailableSeats());
    }

    @Test
    public void testMultipleCancellations() {
        TrainBookingSystem tbs = new TrainBookingSystem(5);
        tbs.bookTicket();
        tbs.cancelTicket();
        tbs.cancelTicket();
        assertEquals(6, tbs.getAvailableSeats());
    }

    @Test
    public void testSequentialBookingAndCancellation() {
        TrainBookingSystem tbs = new TrainBookingSystem(3);
        tbs.bookTicket();
        tbs.bookTicket();
        tbs.cancelTicket();
        tbs.bookTicket();
        assertEquals(2, tbs.getAvailableSeats());
    }

    @Test
    public void testOverCancellation() {
        TrainBookingSystem tbs = new TrainBookingSystem(3);
        tbs.cancelTicket();
        tbs.cancelTicket();
        tbs.cancelTicket();
        tbs.cancelTicket();
        assertEquals(7, tbs.getAvailableSeats());
    }
}



EXP 1:EC2 INSTANCE CREATION
-->search ec2 instance and select the 1st
-->click launch instance
-->create name,tags
-->select AMI(AWS Amazon)
-->create the key pair(download the file)
-->network settings(subnet setting)
-->add security grps(type=http ,sourcetype=custom , source=0.0.0.0/0
-->click launch instance and view instances


EXP 2:RDP TO LOGIN INTO WINDOWS
-->select ec2 instance and launch the new instance
-->create name,tags
-->select AMI(windows)
-->generate the key pair
-->network settings(subnet setting)
-->add security grps(type=http ,sourcetype=custom , source=0.0.0.0/0
-->click launch instance and view instances
-->select the instance and click connect
-->select the RDP client
-->select the getpassword
-->then download the remote desktop file(RDP file)
-->copy the password
-->upload the key pair file
-->select decrypt password
-->open the RDP file
-->paste the password and click ok
-->new window is opened


EXP:3  S3 BUCKET
-->search s3
-->create a unique bucket name
-->Bucket version-Enable
-->Bucket key-Disable
-->then click create bucket
-->click the new bucket
-->permission-off the block public(save changes)
-->bucket policy-policy generator-select s3 bucket policy
-->principle-*
-->action-getobject
-->ARN-copy the arn from console and paste add (/*)
-->click add statement
-->generate policy
-->copy the json file and paste in the bucket policy and save changes.
-->click the bucket and select the object and copy the object url.
-->run in the new tab 



EXP:4   IAM SECURITY POLICIES AND ACCESS CONTROL
-->search IAM user 
-->create many users(s3 policy)
-->download .csv file
-->create a user grp(ec2 instance)
-->view the user grp an add the users in the grp


EXP:5   AMI AND SNAPSHOT CREATION 
-->search ec2 instance
-->create a instance 
-->select the instance 
-->click the action-image template-create image
-->enter the name of the image
-->click create image
-->the image is created in the AMI
-->select the snapshot from the left side 
-->click the create snapshot
-->enter the name
-->select the instance that u created recently to create the image
-->create 
-->the snap is created

EXP 6:   DOCKER CONTAINERIZATION AND DOCKER VOLUMES
-->create a instance
-->click connect
-->select the ec2 instance connect
-->connect
-->sudo su
-->yum install docker
-->systemctl start docker
-->docker pull nginx
-->docker volume create my_volume

-->docker run -d --name my_nginx -v my_volume:/usr/share/nginx/html -p 80:80 
nginx
-->for checking docker inspect my_nginx(container name)


EXP 7: DOCKER NETWORKING AND COMPOSE FOR MULTI-CONTAINER APPLICATIONS
-->sudo su
-->docker ps
-->sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
-->sudo chmod +x /usr/local/bin/docker-compose
-->docker-compose --version
-->nano docker-compose.yml
(new tab)
-->version: '3.8'

services:
 web:
    image: nginx:latest
    ports:
      - "80:80"
    networks:
      - frontend

  
  cache:
    image: redis:latest
    networks:
      - backend

networks:
  frontend:
  backend:

crtlo and crtl x
-->docker-compose up -d
-->docker ps
-->docker-compose up -d --scale cache=3
--> docker pull ubuntu
--> docker run -dit --name host1 --network host ubuntu
--> docker run -dit --name host2 --network host ubuntu
--> docker ps
--> docker exec host1 apt-get update
--> docker  exec host1 apt-get install iputils-ping
--> docker exec host2 apt-get update
--> docker  exec host2 apt-get install iputils-ping
--> docker exec host1 hostname -i
--> docker exec host2 ping -c 4 <previously generated IP>


EXP:9   AMAZON EC2 AUTO SCALING GROUPS AND APPLICATION LOAD BALANCER
-->search s3
-->create a unique bucket name
-->Bucket version-Enable
-->Bucket key-Disable
-->then click create bucket
-->click the new bucket
-->permission-off the block public(save changes)
-->bucket policy-policy generator-select s3 bucket policy
-->principle-*
-->action-getobject
-->ARN-copy the arn from console and paste add (/*)
-->click add statement
-->generate policy
-->copy the json file and paste in the bucket policy and save changes.
-->click the bucket and select the object and copy the object url.
-->run in the new tab

EXP:10   NETWORK LOAD NBALANCERS
-->create the instance
-->go to load balancers
-->create load
-->select network load balancer
-->click create
-->enter the load balancer name
-->in network mappings select the instances mappings code
-->go to ec2 instance page and the click the created instance id
-->then click the subnet id
-->check the available zone  (eg:ap-southeast-2a)
-->then go back to load balancers mappings select this.
-->in security grps select the instance used and the default must be there.
-->in listeners and routing click create target grp
-->enter the target name and create
-->select the instance id and click include as pending below
-->then click target grp
-->enter the name
-->click create
-->select the create target grp
-->again go to the listeners and routing
-->change the protocol to udp
-->click create target grp
-->enter the name
-->click create
-->select the created target grp
-->click create load balancers
-->things created will be visible in the listeners



public class BankAccount {

    int balance = 10000;

    public int deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposit successful! New balance: $" + balance);
        } else {
            System.out.println("Invalid deposit amount.");
        }
        return balance;
    }

    public int withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawal successful! New balance: $" + balance);
        } else if (amount > balance) {
            System.out.println("Insufficient funds.");
        } else {
            System.out.println("Invalid withdrawal amount.");
        }
        return balance;
    }

    public double getBalance() {
        return balance;
    }
}

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class BankAccountTest {
@Test
public void testDep() {
    BankAccount ba = new BankAccount();
    assertEquals("An Error has occurred while depositing the money", 10200, ba.deposit(200));
}

@Test
public void testWit() {
    BankAccount ba = new BankAccount();
    assertEquals("An Error has occurred while withdrawing the money", 9800, ba.withdraw(200));
}


}